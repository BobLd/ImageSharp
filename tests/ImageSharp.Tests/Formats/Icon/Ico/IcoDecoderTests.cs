// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.

using System.Diagnostics;
using SixLabors.ImageSharp.Formats.Ico;
using SixLabors.ImageSharp.PixelFormats;
using static SixLabors.ImageSharp.Tests.TestImages.Ico;

namespace SixLabors.ImageSharp.Tests.Formats.Icon.Ico;

[Trait("Format", "Icon")]
[ValidateDisposedMemoryAllocations]
public class IcoDecoderTests
{
    [Theory]
    [WithFile(Flutter, PixelTypes.Rgba32)]
    public void IcoDecoder_Decode(TestImageProvider<Rgba32> provider)
    {
        using Image<Rgba32> image = provider.GetImage(IcoDecoder.Instance);

        image.DebugSaveMultiFrame(provider, extension: "png");

        // TODO: Assert metadata, frame count, etc
    }

    [Theory]
    [WithFile(Bpp1_size_15x15, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_16x16, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_17x17, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_1x1, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_256x256, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_2x2, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_31x31, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_32x32, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_33x33, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_3x3, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_4x4, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_5x5, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_6x6, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_7x7, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_8x8, PixelTypes.Rgba32)]
    [WithFile(Bpp1_size_9x9, PixelTypes.Rgba32)]
    [WithFile(Bpp1_transp_not_square, PixelTypes.Rgba32)]
    [WithFile(Bpp1_transp_partial, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_15x15, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_16x16, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_17x17, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_1x1, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_256x256, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_2x2, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_31x31, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_32x32, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_33x33, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_3x3, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_4x4, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_5x5, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_6x6, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_7x7, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_8x8, PixelTypes.Rgba32)]
    [WithFile(Bpp24_size_9x9, PixelTypes.Rgba32)]
    [WithFile(Bpp24_transp_not_square, PixelTypes.Rgba32)]
    [WithFile(Bpp24_transp_partial, PixelTypes.Rgba32)]
    [WithFile(Bpp24_transp, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_15x15, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_16x16, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_17x17, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_1x1, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_256x256, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_2x2, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_31x31, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_32x32, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_33x33, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_3x3, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_4x4, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_5x5, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_6x6, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_7x7, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_8x8, PixelTypes.Rgba32)]
    [WithFile(Bpp32_size_9x9, PixelTypes.Rgba32)]
    [WithFile(Bpp32_transp_not_square, PixelTypes.Rgba32)]
    [WithFile(Bpp32_transp_partial, PixelTypes.Rgba32)]
    [WithFile(Bpp32_transp, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_15x15, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_16x16, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_17x17, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_1x1, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_256x256, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_2x2, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_31x31, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_32x32, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_33x33, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_3x3, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_4x4, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_5x5, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_6x6, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_7x7, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_8x8, PixelTypes.Rgba32)]
    [WithFile(Bpp4_size_9x9, PixelTypes.Rgba32)]
    [WithFile(Bpp4_transp_not_square, PixelTypes.Rgba32)]
    [WithFile(Bpp4_transp_partial, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_15x15, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_16x16, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_17x17, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_1x1, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_256x256, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_2x2, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_31x31, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_32x32, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_33x33, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_3x3, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_4x4, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_5x5, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_6x6, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_7x7, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_8x8, PixelTypes.Rgba32)]
    [WithFile(Bpp8_size_9x9, PixelTypes.Rgba32)]
    [WithFile(Bpp8_transp_not_square, PixelTypes.Rgba32)]
    [WithFile(Bpp8_transp_partial, PixelTypes.Rgba32)]
    [WithFile(IcoFake, PixelTypes.Rgba32)]
    [WithFile(Invalid_all, PixelTypes.Rgba32)]
    [WithFile(Invalid_bpp, PixelTypes.Rgba32)]
    [WithFile(Invalid_compression, PixelTypes.Rgba32)]
    [WithFile(Invalid_png, PixelTypes.Rgba32)]
    [WithFile(Invalid_RLE4, PixelTypes.Rgba32)]
    [WithFile(Invalid_RLE8, PixelTypes.Rgba32)]
    [WithFile(Mixed_bmp_png_a, PixelTypes.Rgba32)]
    [WithFile(Mixed_bmp_png_b, PixelTypes.Rgba32)]
    [WithFile(Mixed_bmp_png_c, PixelTypes.Rgba32)]
    [WithFile(Multi_size_a, PixelTypes.Rgba32)]
    [WithFile(Multi_size_b, PixelTypes.Rgba32)]
    [WithFile(Multi_size_c, PixelTypes.Rgba32)]
    [WithFile(Multi_size_d, PixelTypes.Rgba32)]
    [WithFile(Multi_size_e, PixelTypes.Rgba32)]
    [WithFile(Multi_size_f, PixelTypes.Rgba32)]
    [WithFile(Multi_size_multi_bits_a, PixelTypes.Rgba32)]
    [WithFile(Multi_size_multi_bits_b, PixelTypes.Rgba32)]
    [WithFile(Multi_size_multi_bits_c, PixelTypes.Rgba32)]
    [WithFile(Multi_size_multi_bits_d, PixelTypes.Rgba32)]
    public void IcoDecoder_Decode2(TestImageProvider<Rgba32> provider)
    {
        Debug.Assert(false);
    }
}
